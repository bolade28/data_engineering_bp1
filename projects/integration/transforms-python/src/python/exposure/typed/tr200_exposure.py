from transforms.api import transform_df, incremental, Input, Output
import pyspark.sql.functions as F


@incremental()
@transform_df(
    Output("/BP/IST-IG-DD/data/technical/exposure/typed/titan/tr200_exposure"),
    df=Input("/BP/IST-IG-SS-Systems/data/raw/titan/tr200_exposure/tr200_exposure"),
)
def my_compute_function(df):
    df = df.select(
        df['Valuation_Definition_Name'],
        df['Current_Valuation_Run_ID'].cast('int'),
        df['Previous_Valuation_Run_ID'].cast('int'),
        F.to_date(df['Current_COB_Date'], 'yyyy-MM-dd').alias('Current_COB_Date'),
        F.to_date(df['Previous_COB_Date'], 'yyyy-MM-dd').alias('Previous_COB_Date'),
        df['Delta_Type'],
        df['Delta_Sub_Type'],
        df['Exposure_Type'],
        df['Reporting_Currency'],
        df['Legal_Entity'],
        df['Counterparty'],
        df['Book'],
        df['Strategy'],
        df['Cargo_Reference'],
        df['Chain'],
        df['Product_Type'],
        df['Charge_Type'],
        df['Product'],
        df['PNL_Start_Year'],
        df['Book_Transfer'].cast('boolean'),
        df['Trade_Group_ID'].cast('int'),
        df['Trade_ID'].cast('int'),
        df['Natural_Key'],
        df['Valuation_Key'],
        df['Valuation_Status'],
        df['Trade_Status'],
        df['Leg_Type'],
        F.to_date(df['Settlement_Period_Start'], 'yyyy-MM-dd').alias('Settlement_Period_Start'),
        F.to_date(df['Settlement_Period_End'], 'yyyy-MM-dd').alias('Settlement_Period_End'),
        df['Trade_Settlement_Period_ID'].cast('int'),
        df['Delivery_Location'],
        F.to_date(df['Trade_Date'], 'yyyy-MM-dd').alias('Trade_Date'),
        df['Trader_NTID'],
        F.to_date(df['Delivery_Start_Date'], 'yyyy-MM-dd').alias('Delivery_Start_Date'),
        F.to_date(df['Delivery_End_Date'], 'yyyy-MM-dd').alias('Delivery_End_Date'),
        df['Buy_Sell'],
        df['Fixed_Float'],
        df['Trade_Currency'],
        df['Delta_Unit_Type'],
        df['Reporting_Tag'],
        df['Commodity_Group'],
        df['Reporting_Group'],
        df['Index_Name'],
        df['Curve_Name'],
        F.to_date(df['Pricing_Maturity_Start'], 'yyyy-MM-dd').alias('Pricing_Maturity_Start'),
        F.to_date(df['Pricing_Maturity_End'], 'yyyy-MM-dd').alias('Pricing_Maturity_End'),
        df['Pricing_Maturity_Period'],
        df['Point_Month'],
        F.to_date(df['Point_Date'], 'yyyy-MM-dd').alias('Point_Date'),
        df['Fixed_Float_Point'],
        df['Forward_Point'].cast('int'),
        df['Historic_Point'].cast('int'),
        df['Settled_Point'].cast('int'),
        df['Price_UOM'],
        df['Price'].cast('double'),
        df['Curve_Delta_UOM'],
        df['Curve_Delta'].cast('double'),
        df['Index_Price_UOM'],
        df['Index_Price_Commodity_UOM'],
        df['FX_Trade_Currency'],
        df['FX_Reporting_Currency'],
        df['FX_Rate_Spot'].cast('double'),
        df['FX_Rate_Forward'].cast('double'),
        df['DCF_Trade_Currency'].cast('double'),
        df['DCF_Report_Currency'].cast('double'),
        df['Year_Fraction'].cast('double'),
        df['Payment_Month'],
        F.to_date(df['Payment_Date'], 'yyyy-MM-dd').alias('Payment_Date'),
        df['FX_Fixed_Float'],
        df['FX_Delta'].cast('double'),
        df['Grid_Point_Name'],
        df['CurveType'],
        df['TradeReference'],
        df['Curve_DCF_Report_Currency'],
        F.to_timestamp(df['RunDateTime'], 'yyyy-MM-dd HH:mm:ss').alias('RunDateTime'),
    )
    return df
